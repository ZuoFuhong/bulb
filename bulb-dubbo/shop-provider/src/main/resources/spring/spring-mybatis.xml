<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${druid.initial-size}" />
        <property name="minIdle" value="${druid.min-idle}" />
        <property name="maxActive" value="${druid.max-active}" />
        <property name="maxWait" value="${druid.max-wait}" />
        <property name="timeBetweenEvictionRunsMillis" value="${druid.time-between-eviction-runs-millis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.min-evictable-idle-time-millis}" />
        <property name="validationQuery" value="${druid.validation-query}" />
        <property name="testWhileIdle" value="${druid.test-while-idle}" />
        <property name="testOnBorrow" value="${druid.test-on-borrow}" />
        <property name="testOnReturn" value="${druid.test-on-return}" />
        <property name="poolPreparedStatements" value="${druid.pool-prepared-statements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.max-pool-prepared-statement-per-connection-size}" />
        <property name="filters" value="stat" />
    </bean>

    <!--使用 SqlSessionFactoryBean来创建 SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mapper/**/*.xml" />
        <property name="configLocation" value="classpath:spring/mybatis-config.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.maxzuo.dubbo.shop.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="java.lang.Throwable" />
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="java.lang.Throwable" />
            <tx:method name="save*" propagation="REQUIRED"
                       rollback-for="java.lang.Throwable" />
            <tx:method name="delete*" propagation="REQUIRED"
                       rollback-for="java.lang.Throwable" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <aop:config proxy-target-class="true">
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* bulb.service..*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice" />
    </aop:config>
</beans>